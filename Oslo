# Complexity Project 1/17 - 2/17
import numpy as np
import random as rd

L = 32   #Length of domain
p = 0.5  #Porbability of threshold
j = 60   #Number of sand grains dropped

class oslo():
    def __init__(self, L):
        self.size = L
        self.height = np.zeros(L + 1)
        self.thresh = np.array([rd.randint(1, 2) for x in self.height])

    def drive(self):
        # add rice grain to lefthand side
        self.height[0] += 1

    def relax(self):
        # move through each element of heights
        # compute slope
        shift = np.roll(self.height, -1)
        shift[-1] = 0
        slope = self.height - shift
        truefalse = (slope) > self.thresh #When slope>thresh = 1
        print 'height'
        print self.height
        print 'threshold'
        print self.thresh

        i = 0
        while np.sum(truefalse) > 0 :
            print i
            print 'i above'

            if truefalse[i]= True :
                if i==0 :
                    self.height[0] -= 1
                    self.height[1] += 1
                    i += 1
                elif i==L :
                    self.height[L] -= 1
                    self.height[L-1] += 1
                    i == 0
                else:
                    self.height[i] -= 1
                    self.height[i+1] += 1
                    i += 1
            else :
                i+=1
            shift = np.roll(self.height, -1)
            shift[-1] = 0
            slope = self.height - shift
            truefalse = (slope) > self.thresh  #Used to update truefalse, better way to do this?
            print 'height'
            print self.height
            #self.thresh[i] = np.random.binomial(1, p, None) +1.5 #Porbability change
            print self.thresh


pile = oslo(L)  #creating objects


while j > 0 :
    pile.drive()
    pile.relax()
    j -= 1

quit()
