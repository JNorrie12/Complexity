# Complexity Project 1/17 - 2/17
import numpy as np
import random as rd
import matplotlib.pyplot as plt

L = 8   #Length of domain
p = 0.5  #Porbability of threshold
j = 100000#Number of sand grains dropped

class oslo():
    def __init__(self, L):
        self.size = L
        self.height = np.zeros(L + 1)
        self.thresh = np.array([rd.randint(1, 2) for x in self.height])

    def draw(self):
        for i in range(L):
            print '[{}, {}, {}]'.format(int(self.height[i]),int(self.thresh[i]),int(self.height[i])-int(self.height[i+1])) + '#'* np.int(self.height[i])

    def drive(self):
        # add rice grain to lefthand side
        self.height[0] += 1

    def relax(self):
        # move through each element of heights
        # compute slope
        shift = np.roll(self.height, -1)
        shift[-1] = 0
        slope = self.height - shift
        truefalse = (slope) > self.thresh #When slope>thresh = 1
        i = 0
        while np.sum(truefalse) > 0 :
            print'hello'
            for i in np.arange(self.size):
                if truefalse[i] == 1 :
                    if i==0 :
                        self.height[0] -= 1 #Height change
                        self.height[1] += 1
                    elif i==L :
                        self.height[L] -= 1
                    else:
                        self.height[i] -= 1
                        self.height[i+1] += 1
                self.thresh[i] = np.random.binomial(1, p, None) + 1.5
                shift = np.roll(self.height, -1)
                shift[-1] = 0
                slope = self.height - shift
                truefalse = (slope) > self.thresh  #Used to update truefalse, better way to do this?


pile = oslo(L)  #creating objects
while j > 0 :
    pile.drive()
    pile.relax()
    pile.draw()
    j -= 1
quit()
